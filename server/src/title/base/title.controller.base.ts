/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TitleService } from "../title.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TitleCreateInput } from "./TitleCreateInput";
import { TitleWhereInput } from "./TitleWhereInput";
import { TitleWhereUniqueInput } from "./TitleWhereUniqueInput";
import { TitleFindManyArgs } from "./TitleFindManyArgs";
import { TitleUpdateInput } from "./TitleUpdateInput";
import { Title } from "./Title";
import { SegmentFindManyArgs } from "../../segment/base/SegmentFindManyArgs";
import { Segment } from "../../segment/base/Segment";
import { SegmentWhereUniqueInput } from "../../segment/base/SegmentWhereUniqueInput";
@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TitleControllerBase {
  constructor(
    protected readonly service: TitleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "create",
    possession: "any",
  })
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Title })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async create(@common.Body() data: TitleCreateInput): Promise<Title> {
    return await this.service.create({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        refTranscription: true,
        sampleRate: true,
        sourceDuration: true,
        sourceFilename: true,
        sourceFilePath: true,
        sourceFileSize: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "any",
  })
  @common.Get()
  @swagger.ApiOkResponse({ type: [Title] })
  @swagger.ApiForbiddenResponse()
  @ApiNestedQuery(TitleFindManyArgs)
  async findMany(@common.Req() request: Request): Promise<Title[]> {
    const args = plainToClass(TitleFindManyArgs, request.query);
    return this.service.findMany({
      ...args,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        refTranscription: true,
        sampleRate: true,
        sourceDuration: true,
        sourceFilename: true,
        sourceFilePath: true,
        sourceFileSize: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "own",
  })
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Title })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async findOne(
    @common.Param() params: TitleWhereUniqueInput
  ): Promise<Title | null> {
    const result = await this.service.findOne({
      where: params,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        refTranscription: true,
        sampleRate: true,
        sourceDuration: true,
        sourceFilename: true,
        sourceFilePath: true,
        sourceFileSize: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Title })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async update(
    @common.Param() params: TitleWhereUniqueInput,
    @common.Body() data: TitleUpdateInput
  ): Promise<Title | null> {
    try {
      return await this.service.update({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          refTranscription: true,
          sampleRate: true,
          sourceDuration: true,
          sourceFilename: true,
          sourceFilePath: true,
          sourceFileSize: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "delete",
    possession: "any",
  })
  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Title })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiForbiddenResponse({ type: errors.ForbiddenException })
  async delete(
    @common.Param() params: TitleWhereUniqueInput
  ): Promise<Title | null> {
    try {
      return await this.service.delete({
        where: params,
        select: {
          createdAt: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          refTranscription: true,
          sampleRate: true,
          sourceDuration: true,
          sourceFilename: true,
          sourceFilePath: true,
          sourceFileSize: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "read",
    possession: "any",
  })
  @common.Get("/:id/segments")
  @ApiNestedQuery(SegmentFindManyArgs)
  async findManySegments(
    @common.Req() request: Request,
    @common.Param() params: TitleWhereUniqueInput
  ): Promise<Segment[]> {
    const query = plainToClass(SegmentFindManyArgs, request.query);
    const results = await this.service.findSegments(params.id, {
      ...query,
      select: {
        annotation: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        duration: true,
        endSample: true,
        fileAbsolutePath: true,
        filename: true,
        id: true,
        startSample: true,

        title: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "update",
    possession: "any",
  })
  @common.Post("/:id/segments")
  async connectSegments(
    @common.Param() params: TitleWhereUniqueInput,
    @common.Body() body: SegmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      segments: {
        connect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "update",
    possession: "any",
  })
  @common.Patch("/:id/segments")
  async updateSegments(
    @common.Param() params: TitleWhereUniqueInput,
    @common.Body() body: SegmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      segments: {
        set: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }

  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "update",
    possession: "any",
  })
  @common.Delete("/:id/segments")
  async disconnectSegments(
    @common.Param() params: TitleWhereUniqueInput,
    @common.Body() body: SegmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      segments: {
        disconnect: body,
      },
    };
    await this.service.update({
      where: params,
      data,
      select: { id: true },
    });
  }
}
