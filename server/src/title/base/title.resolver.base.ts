/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTitleArgs } from "./CreateTitleArgs";
import { UpdateTitleArgs } from "./UpdateTitleArgs";
import { DeleteTitleArgs } from "./DeleteTitleArgs";
import { TitleFindManyArgs } from "./TitleFindManyArgs";
import { TitleFindUniqueArgs } from "./TitleFindUniqueArgs";
import { Title } from "./Title";
import { SegmentFindManyArgs } from "../../segment/base/SegmentFindManyArgs";
import { Segment } from "../../segment/base/Segment";
import { Project } from "../../project/base/Project";
import { TitleService } from "../title.service";

@graphql.Resolver(() => Title)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TitleResolverBase {
  constructor(
    protected readonly service: TitleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "any",
  })
  async _titlesMeta(
    @graphql.Args() args: TitleFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Title])
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "any",
  })
  async titles(@graphql.Args() args: TitleFindManyArgs): Promise<Title[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Title, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "read",
    possession: "own",
  })
  async title(
    @graphql.Args() args: TitleFindUniqueArgs
  ): Promise<Title | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Title)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "create",
    possession: "any",
  })
  async createTitle(@graphql.Args() args: CreateTitleArgs): Promise<Title> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Title)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "update",
    possession: "any",
  })
  async updateTitle(
    @graphql.Args() args: UpdateTitleArgs
  ): Promise<Title | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Title)
  @nestAccessControl.UseRoles({
    resource: "Title",
    action: "delete",
    possession: "any",
  })
  async deleteTitle(
    @graphql.Args() args: DeleteTitleArgs
  ): Promise<Title | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Segment])
  @nestAccessControl.UseRoles({
    resource: "Segment",
    action: "read",
    possession: "any",
  })
  async segments(
    @graphql.Parent() parent: Title,
    @graphql.Args() args: SegmentFindManyArgs
  ): Promise<Segment[]> {
    const results = await this.service.findSegments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async project(@graphql.Parent() parent: Title): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
